3ca9cad9 (marc        2017-08-05 14:48:07 -0500   1) # -*- coding: utf-8 -*-
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   2) from collections import defaultdict
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   3) import mock
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   4) from searx.engines import bing_videos
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   5) from searx.testing import SearxTestCase
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   6) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   7) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   8) class TestBingVideosEngine(SearxTestCase):
3ca9cad9 (marc        2017-08-05 14:48:07 -0500   9) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  10)     def test_request(self):
a524dbb8 (marc        2017-10-10 16:49:49 -0500  11)         bing_videos.supported_languages = ['fr-FR', 'en-US']
a524dbb8 (marc        2017-10-10 16:49:49 -0500  12) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  13)         query = 'test_query'
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  14)         dicto = defaultdict(dict)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  15)         dicto['pageno'] = 1
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  16)         dicto['language'] = 'fr-FR'
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  17)         dicto['safesearch'] = 0
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  18)         dicto['time_range'] = ''
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  19)         params = bing_videos.request(query, dicto)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  20)         self.assertTrue('url' in params)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  21)         self.assertTrue(query in params['url'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  22)         self.assertTrue('bing.com' in params['url'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  23)         self.assertTrue('SRCHHPGUSR' in params['cookies'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  24)         self.assertTrue('OFF' in params['cookies']['SRCHHPGUSR'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  25)         self.assertTrue('_EDGE_S' in params['cookies'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  26)         self.assertTrue('fr-fr' in params['cookies']['_EDGE_S'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  27) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  28)         dicto['pageno'] = 2
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  29)         dicto['time_range'] = 'day'
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  30)         dicto['safesearch'] = 2
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  31)         params = bing_videos.request(query, dicto)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  32)         self.assertTrue('first=11' in params['url'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  33)         self.assertTrue('1440' in params['url'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  34)         self.assertIn('SRCHHPGUSR', params['cookies'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  35)         self.assertTrue('STRICT' in params['cookies']['SRCHHPGUSR'])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  36) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  37)     def test_response(self):
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  38)         self.assertRaises(AttributeError, bing_videos.response, None)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  39)         self.assertRaises(AttributeError, bing_videos.response, [])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  40)         self.assertRaises(AttributeError, bing_videos.response, '')
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  41)         self.assertRaises(AttributeError, bing_videos.response, '[]')
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  42) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  43)         response = mock.Mock(text='<html></html>')
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  44)         self.assertEqual(bing_videos.response(response), [])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  45) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  46)         response = mock.Mock(text='<html></html>')
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  47)         self.assertEqual(bing_videos.response(response), [])
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  48) 
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  49)         html = """
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  50)         <div class="dg_u">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  51)             <div id="mc_vtvc_1" class="mc_vtvc">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  52)                 <a class="mc_vtvc_link" href="/video">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  53)                     <div class="mc_vtvc_th">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  54)                         <div class="cico">
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  55)                             <img src="thumb_1.jpg" />
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  56)                         </div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  57)                         <div class="mc_vtvc_ban_lo">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  58)                             <div class="vtbc">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  59)                                 <div class="mc_bc_w b_smText">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  60)                                     <div class="mc_bc pivot bpi_2">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  61)                                         <span title="">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  62)                                              <span class="mv_vtvc_play cipg "></span>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  63)                                         </span>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  64)                                     </div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  65)                                     <div class="mc_bc items">10:06</div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  66)                                 </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  67)                             </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  68)                         </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  69)                         </div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  70)                         <div class="mc_vtvc_meta">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  71)                         <div class="mc_vtvc_title" title="Title 1"></div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  72)                         <div class="mc_vtvc_meta_block_area">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  73)                         <div class="mc_vtvc_meta_block">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  74)                             <div class="mc_vtvc_meta_row">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  75)                                 <span>65,696,000+ views</span>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  76)                                 <span>1 year ago</span>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  77)                             </div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  78)                             <div class="mc_vtvc_meta_row mc_vtvc_meta_row_channel">Content 1</div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  79)                             <div class="mc_vtvc_meta_row"><span>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  80)                                 <div class="cico mc_vtvc_src_ico">
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  81)                                     <div></div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  82)                                 </div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  83)                                 <span>YouTube</span>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  84)                             </span></div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  85)                         </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  86)                         </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  87)                     </div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  88)                     <div class="vrhdata"></div>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  89)                     </a>
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  90)                 </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  91)             </div>
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  92)         """
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  93)         response = mock.Mock(text=html)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  94)         results = bing_videos.response(response)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  95)         self.assertEqual(type(results), list)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  96)         self.assertEqual(len(results), 1)
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  97)         self.assertEqual(results[0]['title'], 'Title 1')
3ef8533f (Noémi Ványi 2018-02-10 20:03:55 +0100  98)         self.assertEqual(results[0]['url'], 'https://bing.com/video')
3ca9cad9 (marc        2017-08-05 14:48:07 -0500  99)         self.assertEqual(results[0]['content'], 'Content 1')
3ca9cad9 (marc        2017-08-05 14:48:07 -0500 100)         self.assertEqual(results[0]['thumbnail'], 'thumb_1.jpg')
