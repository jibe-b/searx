8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   1) from collections import defaultdict
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   2) import mock
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   3) from searx.engines import flickr
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   4) from searx.testing import SearxTestCase
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   5) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   6) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   7) class TestFlickrEngine(SearxTestCase):
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   8) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100   9)     @little_documented
def test_request(self):
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  10)         query = 'test_query'
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  11)         dicto = defaultdict(dict)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  12)         dicto['pageno'] = 0
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  13)         params = flickr.request(query, dicto)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  14)         self.assertTrue('url' in params)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  15)         self.assertTrue(query in params['url'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  16)         self.assertTrue('flickr.com' in params['url'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  17) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  18)     def test_response(self):
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  19)         self.assertRaises(AttributeError, flickr.response, None)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  20)         self.assertRaises(AttributeError, flickr.response, [])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  21)         self.assertRaises(AttributeError, flickr.response, '')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  22)         self.assertRaises(AttributeError, flickr.response, '[]')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  23) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  24)         response = mock.Mock(text='{}')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  25)         self.assertEqual(flickr.response(response), [])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  26) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  27)         response = mock.Mock(text='{"data": []}')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  28)         self.assertEqual(flickr.response(response), [])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  29) 
b3ab221b tests/unit/engines/test_flickr.py  (stepshal     2016-07-11 20:29:47 +0700  30)         json = r"""
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  31)         { "photos": { "page": 1, "pages": "41001", "perpage": 100, "total": "4100032",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  32)             "photo": [
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  33)             { "id": "15751017054", "owner": "66847915@N08",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  34)             "secret": "69c22afc40", "server": "7285", "farm": 8,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  35)             "title": "Photo title", "ispublic": 1,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  36)             "isfriend": 0, "isfamily": 0,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  37)             "description": { "_content": "Description" },
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  38)             "ownername": "Owner",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  39)             "url_o": "https:\/\/farm8.staticflickr.com\/7285\/15751017054_9178e0f963_o.jpg",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  40)             "height_o": "2100", "width_o": "2653",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  41)             "url_n": "https:\/\/farm8.staticflickr.com\/7285\/15751017054_69c22afc40_n.jpg",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  42)             "height_n": "253", "width_n": "320",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  43)             "url_z": "https:\/\/farm8.staticflickr.com\/7285\/15751017054_69c22afc40_z.jpg",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  44)             "height_z": "507", "width_z": "640" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  45)         ] }, "stat": "ok" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  46)         """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  47)         response = mock.Mock(text=json)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  48)         results = flickr.response(response)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  49)         self.assertEqual(type(results), list)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  50)         self.assertEqual(len(results), 1)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  51)         self.assertEqual(results[0]['title'], 'Photo title')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  52)         self.assertEqual(results[0]['url'], 'https://www.flickr.com/photos/66847915@N08/15751017054')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  53)         self.assertTrue('o.jpg' in results[0]['img_src'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  54)         self.assertTrue('n.jpg' in results[0]['thumbnail_src'])
fdf63940 tests/unit/engines/test_flickr.py  (Adam Tauber  2016-12-09 19:10:57 +0100  55)         self.assertTrue('Owner' in results[0]['author'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  56)         self.assertTrue('Description' in results[0]['content'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  57) 
b3ab221b tests/unit/engines/test_flickr.py  (stepshal     2016-07-11 20:29:47 +0700  58)         json = r"""
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  59)         { "photos": { "page": 1, "pages": "41001", "perpage": 100, "total": "4100032",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  60)             "photo": [
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  61)             { "id": "15751017054", "owner": "66847915@N08",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  62)             "secret": "69c22afc40", "server": "7285", "farm": 8,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  63)             "title": "Photo title", "ispublic": 1,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  64)             "isfriend": 0, "isfamily": 0,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  65)             "description": { "_content": "Description" },
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  66)             "ownername": "Owner",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  67)             "url_z": "https:\/\/farm8.staticflickr.com\/7285\/15751017054_69c22afc40_z.jpg",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  68)             "height_z": "507", "width_z": "640" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  69)         ] }, "stat": "ok" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  70)         """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  71)         response = mock.Mock(text=json)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  72)         results = flickr.response(response)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  73)         self.assertEqual(type(results), list)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  74)         self.assertEqual(len(results), 1)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  75)         self.assertEqual(results[0]['title'], 'Photo title')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  76)         self.assertEqual(results[0]['url'], 'https://www.flickr.com/photos/66847915@N08/15751017054')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  77)         self.assertTrue('z.jpg' in results[0]['img_src'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  78)         self.assertTrue('z.jpg' in results[0]['thumbnail_src'])
fdf63940 tests/unit/engines/test_flickr.py  (Adam Tauber  2016-12-09 19:10:57 +0100  79)         self.assertTrue('Owner' in results[0]['author'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  80)         self.assertTrue('Description' in results[0]['content'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  81) 
b3ab221b tests/unit/engines/test_flickr.py  (stepshal     2016-07-11 20:29:47 +0700  82)         json = r"""
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  83)         { "photos": { "page": 1, "pages": "41001", "perpage": 100, "total": "4100032",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  84)             "photo": [
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  85)             { "id": "15751017054", "owner": "66847915@N08",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  86)             "secret": "69c22afc40", "server": "7285", "farm": 8,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  87)             "title": "Photo title", "ispublic": 1,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  88)             "isfriend": 0, "isfamily": 0,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  89)             "description": { "_content": "Description" },
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  90)             "ownername": "Owner",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  91)             "url_o": "https:\/\/farm8.staticflickr.com\/7285\/15751017054_9178e0f963_o.jpg",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  92)             "height_o": "2100", "width_o": "2653" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  93)         ] }, "stat": "ok" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  94)         """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  95)         response = mock.Mock(text=json)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  96)         results = flickr.response(response)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  97)         self.assertEqual(type(results), list)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  98)         self.assertEqual(len(results), 1)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100  99)         self.assertEqual(results[0]['title'], 'Photo title')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 100)         self.assertEqual(results[0]['url'], 'https://www.flickr.com/photos/66847915@N08/15751017054')
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 101)         self.assertTrue('o.jpg' in results[0]['img_src'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 102)         self.assertTrue('o.jpg' in results[0]['thumbnail_src'])
fdf63940 tests/unit/engines/test_flickr.py  (Adam Tauber  2016-12-09 19:10:57 +0100 103)         self.assertTrue('Owner' in results[0]['author'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 104)         self.assertTrue('Description' in results[0]['content'])
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 105) 
b3ab221b tests/unit/engines/test_flickr.py  (stepshal     2016-07-11 20:29:47 +0700 106)         json = r"""
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 107)         { "photos": { "page": 1, "pages": "41001", "perpage": 100, "total": "4100032",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 108)             "photo": [
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 109)             { "id": "15751017054", "owner": "66847915@N08",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 110)             "secret": "69c22afc40", "server": "7285", "farm": 8,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 111)             "title": "Photo title", "ispublic": 1,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 112)             "isfriend": 0, "isfamily": 0,
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 113)             "description": { "_content": "Description" },
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 114)             "ownername": "Owner",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 115)             "url_n": "https:\/\/farm8.staticflickr.com\/7285\/15751017054_69c22afc40_n.jpg",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 116)             "height_n": "253", "width_n": "320" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 117)         ] }, "stat": "ok" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 118)         """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 119)         response = mock.Mock(text=json)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 120)         results = flickr.response(response)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 121)         self.assertEqual(type(results), list)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 122)         self.assertEqual(len(results), 0)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 123) 
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 124)         json = """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 125)         { "photos": { "page": 1, "pages": "41001", "perpage": 100, "total": "4100032",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 126)             "toto": [] }, "stat": "ok" }
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 127)         """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 128)         response = mock.Mock(text=json)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 129)         results = flickr.response(response)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 130)         self.assertEqual(type(results), list)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 131)         self.assertEqual(len(results), 0)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 132) 
b3ab221b tests/unit/engines/test_flickr.py  (stepshal     2016-07-11 20:29:47 +0700 133)         json = r"""
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 134)         {"toto":[
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 135)             {"id":200,"name":"Artist Name",
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 136)             "link":"http:\/\/www.flickr.com\/artist\/1217","type":"artist"}
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 137)         ]}
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 138)         """
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 139)         response = mock.Mock(text=json)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 140)         results = flickr.response(response)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 141)         self.assertEqual(type(results), list)
8f040e30 searx/tests/engines/test_flickr.py (Cqoicebordel 2015-01-26 17:36:10 +0100 142)         self.assertEqual(len(results), 0)
