0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  1) from collections import defaultdict
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  2) import mock
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  3) from searx.engines import searchcode_doc
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  4) from searx.testing import SearxTestCase
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  5) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  6) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  7) class TestSearchcodeDocEngine(SearxTestCase):
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  8) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100  9)     @little_documented
def test_request(self):
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 10)         query = 'test_query'
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 11)         dicto = defaultdict(dict)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 12)         dicto['pageno'] = 0
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 13)         params = searchcode_doc.request(query, dicto)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 14)         self.assertIn('url', params)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 15)         self.assertIn(query, params['url'])
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 16)         self.assertIn('searchcode.com', params['url'])
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 17) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 18)     def test_response(self):
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 19)         self.assertRaises(AttributeError, searchcode_doc.response, None)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 20)         self.assertRaises(AttributeError, searchcode_doc.response, [])
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 21)         self.assertRaises(AttributeError, searchcode_doc.response, '')
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 22)         self.assertRaises(AttributeError, searchcode_doc.response, '[]')
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 23) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 24)         response = mock.Mock(text='{}')
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 25)         self.assertEqual(searchcode_doc.response(response), [])
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 26) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 27)         response = mock.Mock(text='{"data": []}')
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 28)         self.assertEqual(searchcode_doc.response(response), [])
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 29) 
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 30)         json = """
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 31)         {
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 32)         "matchterm": "test",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 33)         "previouspage": null,
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 34)         "searchterm": "test",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 35)         "query": "test",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 36)         "total": 60,
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 37)         "page": 0,
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 38)         "nextpage": 1,
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 39)         "results": [
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 40)             {
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 41)             "synopsis": "Synopsis",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 42)             "displayname": null,
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 43)             "name": "test",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 44)             "url": "http://url",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 45)             "type": "Type",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 46)             "icon": null,
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 47)             "namespace": "Namespace",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 48)             "description": "Description"
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 49)             }
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 50)         ]
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 51)         }
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 52)         """
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 53)         response = mock.Mock(text=json)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 54)         results = searchcode_doc.response(response)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 55)         self.assertEqual(type(results), list)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 56)         self.assertEqual(len(results), 1)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 57)         self.assertEqual(results[0]['title'], '[Type] Namespace test')
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 58)         self.assertEqual(results[0]['url'], 'http://url')
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 59)         self.assertIn('Description', results[0]['content'])
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 60) 
b3ab221b tests/unit/engines/test_searchcode_doc.py  (stepshal     2016-07-11 20:29:47 +0700 61)         json = r"""
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 62)         {"toto":[
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 63)             {"id":200,"name":"Artist Name",
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 64)             "link":"http:\/\/www.searchcode_doc.com\/artist\/1217","type":"artist"}
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 65)         ]}
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 66)         """
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 67)         response = mock.Mock(text=json)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 68)         results = searchcode_doc.response(response)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 69)         self.assertEqual(type(results), list)
0f81aa84 searx/tests/engines/test_searchcode_doc.py (Cqoicebordel 2015-01-27 22:38:56 +0100 70)         self.assertEqual(len(results), 0)
