e0c270bd (marc        2016-12-13 23:51:15 -0600   1) from searx.preferences import (EnumStringSetting, MapSetting, MissingArgumentException, SearchLanguageSetting,
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   2)                                MultipleChoiceSetting, PluginsSetting, ValidationException)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   3) from searx.testing import SearxTestCase
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   4) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   5) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   6) class PluginStub(object):
cd9b494c (stepshal    2016-07-10 21:44:27 +0700   7) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   8)     def __init__(self, id, default_on):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200   9)         self.id = id
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  10)         self.default_on = default_on
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  11) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  12) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  13) class TestSettings(SearxTestCase):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  14)     # map settings
cd9b494c (stepshal    2016-07-10 21:44:27 +0700  15) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  16)     def test_map_setting_invalid_initialization(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  17)         with self.assertRaises(MissingArgumentException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  18)             setting = MapSetting(3, wrong_argument={'0': 0})
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  19) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  20)     def test_map_setting_invalid_default_value(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  21)         with self.assertRaises(ValidationException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  22)             setting = MapSetting(3, map={'dog': 1, 'bat': 2})
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  23) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  24)     def test_map_setting_invalid_choice(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  25)         setting = MapSetting(2, map={'dog': 1, 'bat': 2})
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  26)         with self.assertRaises(ValidationException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  27)             setting.parse('cat')
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  28) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  29)     def test_map_setting_valid_default(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  30)         setting = MapSetting(3, map={'dog': 1, 'bat': 2, 'cat': 3})
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  31)         self.assertEquals(setting.get_value(), 3)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  32) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  33)     def test_map_setting_valid_choice(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  34)         setting = MapSetting(3, map={'dog': 1, 'bat': 2, 'cat': 3})
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  35)         self.assertEquals(setting.get_value(), 3)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  36)         setting.parse('bat')
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  37)         self.assertEquals(setting.get_value(), 2)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  38) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  39)     def test_enum_setting_invalid_initialization(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  40)         with self.assertRaises(MissingArgumentException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  41)             setting = EnumStringSetting('cat', wrong_argument=[0, 1, 2])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  42) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  43)     # enum settings
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  44)     def test_enum_setting_invalid_initialization(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  45)         with self.assertRaises(MissingArgumentException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  46)             setting = EnumStringSetting('cat', wrong_argument=[0, 1, 2])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  47) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  48)     def test_enum_setting_invalid_default_value(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  49)         with self.assertRaises(ValidationException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  50)             setting = EnumStringSetting(3, choices=[0, 1, 2])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  51) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  52)     def test_enum_setting_invalid_choice(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  53)         setting = EnumStringSetting(0, choices=[0, 1, 2])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  54)         with self.assertRaises(ValidationException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  55)             setting.parse(3)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  56) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  57)     def test_enum_setting_valid_default(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  58)         setting = EnumStringSetting(3, choices=[1, 2, 3])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  59)         self.assertEquals(setting.get_value(), 3)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  60) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  61)     def test_enum_setting_valid_choice(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  62)         setting = EnumStringSetting(3, choices=[1, 2, 3])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  63)         self.assertEquals(setting.get_value(), 3)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  64)         setting.parse(2)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  65)         self.assertEquals(setting.get_value(), 2)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  66) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  67)     # multiple choice settings
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  68)     def test_multiple_setting_invalid_initialization(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  69)         with self.assertRaises(MissingArgumentException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  70)             setting = MultipleChoiceSetting(['2'], wrong_argument=['0', '1', '2'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  71) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  72)     def test_multiple_setting_invalid_default_value(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  73)         with self.assertRaises(ValidationException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  74)             setting = MultipleChoiceSetting(['3', '4'], choices=['0', '1', '2'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  75) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  76)     def test_multiple_setting_invalid_choice(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  77)         setting = MultipleChoiceSetting(['1', '2'], choices=['0', '1', '2'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  78)         with self.assertRaises(ValidationException):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  79)             setting.parse('4, 3')
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  80) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  81)     def test_multiple_setting_valid_default(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  82)         setting = MultipleChoiceSetting(['3'], choices=['1', '2', '3'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  83)         self.assertEquals(setting.get_value(), ['3'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  84) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  85)     def test_multiple_setting_valid_choice(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  86)         setting = MultipleChoiceSetting(['3'], choices=['1', '2', '3'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  87)         self.assertEquals(setting.get_value(), ['3'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  88)         setting.parse('2')
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  89)         self.assertEquals(setting.get_value(), ['2'])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200  90) 
e0c270bd (marc        2016-12-13 23:51:15 -0600  91)     # search language settings
e0c270bd (marc        2016-12-13 23:51:15 -0600  92)     def test_lang_setting_valid_choice(self):
4d177039 (marc        2017-07-20 15:47:20 -0500  93)         setting = SearchLanguageSetting('en', choices=['de', 'en'])
e0c270bd (marc        2016-12-13 23:51:15 -0600  94)         setting.parse('de')
e0c270bd (marc        2016-12-13 23:51:15 -0600  95)         self.assertEquals(setting.get_value(), 'de')
e0c270bd (marc        2016-12-13 23:51:15 -0600  96) 
e0c270bd (marc        2016-12-13 23:51:15 -0600  97)     def test_lang_setting_invalid_choice(self):
4d177039 (marc        2017-07-20 15:47:20 -0500  98)         setting = SearchLanguageSetting('en', choices=['de', 'en'])
e0c270bd (marc        2016-12-13 23:51:15 -0600  99)         setting.parse('xx')
4d177039 (marc        2017-07-20 15:47:20 -0500 100)         self.assertEquals(setting.get_value(), 'en')
e0c270bd (marc        2016-12-13 23:51:15 -0600 101) 
e0c270bd (marc        2016-12-13 23:51:15 -0600 102)     def test_lang_setting_old_cookie_choice(self):
4d177039 (marc        2017-07-20 15:47:20 -0500 103)         setting = SearchLanguageSetting('en', choices=['en', 'es', 'es-ES'])
e0c270bd (marc        2016-12-13 23:51:15 -0600 104)         setting.parse('es_XA')
e0c270bd (marc        2016-12-13 23:51:15 -0600 105)         self.assertEquals(setting.get_value(), 'es')
e0c270bd (marc        2016-12-13 23:51:15 -0600 106) 
e0c270bd (marc        2016-12-13 23:51:15 -0600 107)     def test_lang_setting_old_cookie_format(self):
4d177039 (marc        2017-07-20 15:47:20 -0500 108)         setting = SearchLanguageSetting('en', choices=['en', 'es', 'es-ES'])
e0c270bd (marc        2016-12-13 23:51:15 -0600 109)         setting.parse('es_ES')
e0c270bd (marc        2016-12-13 23:51:15 -0600 110)         self.assertEquals(setting.get_value(), 'es-ES')
e0c270bd (marc        2016-12-13 23:51:15 -0600 111) 
4d177039 (marc        2017-07-20 15:47:20 -0500 112)     def test_lang_setting_old_default(self):
4d177039 (marc        2017-07-20 15:47:20 -0500 113)         setting = SearchLanguageSetting('en', choices=['en', 'es', 'de'])
4d177039 (marc        2017-07-20 15:47:20 -0500 114)         setting.parse('all')
4d177039 (marc        2017-07-20 15:47:20 -0500 115)         self.assertEquals(setting.get_value(), 'en')
4d177039 (marc        2017-07-20 15:47:20 -0500 116) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 117)     # plugins settings
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 118)     def test_plugins_setting_all_default_enabled(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 119)         plugin1 = PluginStub('plugin1', True)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 120)         plugin2 = PluginStub('plugin2', True)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 121)         setting = PluginsSetting(['3'], choices=[plugin1, plugin2])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 122)         self.assertEquals(setting.get_enabled(), set(['plugin1', 'plugin2']))
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 123) 
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 124)     def test_plugins_setting_few_default_enabled(self):
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 125)         plugin1 = PluginStub('plugin1', True)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 126)         plugin2 = PluginStub('plugin2', False)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 127)         plugin3 = PluginStub('plugin3', True)
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 128)         setting = PluginsSetting('name', choices=[plugin1, plugin2, plugin3])
f0fd9ad6 (Noemi Vanyi 2016-04-09 01:09:26 +0200 129)         self.assertEquals(setting.get_enabled(), set(['plugin1', 'plugin3']))
