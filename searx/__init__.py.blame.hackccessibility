bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  1) '''
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  2) searx is free software: you can redistribute it and/or modify
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  3) it under the terms of the GNU Affero General Public License as published by
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  4) the Free Software Foundation, either version 3 of the License, or
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  5) (at your option) any later version.
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  6) 
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  7) searx is distributed in the hope that it will be useful,
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  8) but WITHOUT ANY WARRANTY; without even the implied warranty of
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200  9) MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 10) GNU Affero General Public License for more details.
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 11) 
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 12) You should have received a copy of the GNU Affero General Public License
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 13) along with searx. If not, see < http://www.gnu.org/licenses/ >.
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 14) 
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 15) (C) 2013- by Adam Tauber, <asciimoo@gmail.com>
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 16) '''
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 17) 
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 18) import certifi
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 19) import logging
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 20) from os import environ
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 21) from os.path import realpath, dirname, join, abspath, isfile
829032f3 (Marc Abonce Seguin 2018-01-16 23:05:18 -0600 22) from io import open
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 23) from ssl import OPENSSL_VERSION_INFO, OPENSSL_VERSION
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 24) try:
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 25)     from yaml import load
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 26) except:
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 27)     from sys import exit, stderr
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 28)     stderr.write('[E] install pyyaml\n')
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 29)     exit(2)
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 30) 
dd466297 (Matej Cotman       2014-01-19 22:59:01 +0100 31) searx_dir = abspath(dirname(__file__))
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 32) engine_dir = dirname(realpath(__file__))
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 33) 
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 34) 
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 35) @little_documented
def check_settings_yml(file_name):
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 36)     if isfile(file_name):
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 37)         return file_name
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 38)     else:
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 39)         return None
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 40) 
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 41) # find location of settings.yml
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 42) if 'SEARX_SETTINGS_PATH' in environ:
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 43)     # if possible set path to settings using the
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 44)     # enviroment variable SEARX_SETTINGS_PATH
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 45)     settings_path = check_settings_yml(environ['SEARX_SETTINGS_PATH'])
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 46) else:
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 47)     # if not, get it from searx code base or last solution from /etc/searx
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 48)     settings_path = check_settings_yml(join(searx_dir, 'settings.yml')) or check_settings_yml('/etc/searx/settings.yml')
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 49) 
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 50) if not settings_path:
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 51)     raise Exception('settings.yml not found')
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 52) 
bc30c4f4 (Thomas Pointhuber  2014-09-13 18:39:03 +0200 53) # load settings
829032f3 (Marc Abonce Seguin 2018-01-16 23:05:18 -0600 54) with open(settings_path, 'r', encoding='utf-8') as settings_yaml:
3afdd1d9 (asciimoo           2014-01-19 00:17:02 +0100 55)     settings = load(settings_yaml)
9b9f097a (Thomas Pointhuber  2014-09-14 11:09:44 +0200 56) 
3e755442 (dalf               2016-10-22 19:07:37 +0200 57) '''
3e755442 (dalf               2016-10-22 19:07:37 +0200 58) enable debug if
3e755442 (dalf               2016-10-22 19:07:37 +0200 59) the environnement variable SEARX_DEBUG is 1 or true
3e755442 (dalf               2016-10-22 19:07:37 +0200 60) (whatever the value in settings.yml)
3e755442 (dalf               2016-10-22 19:07:37 +0200 61) or general.debug=True in settings.yml
3e755442 (dalf               2016-10-22 19:07:37 +0200 62) 
3e755442 (dalf               2016-10-22 19:07:37 +0200 63) disable debug if
3e755442 (dalf               2016-10-22 19:07:37 +0200 64) the environnement variable SEARX_DEBUG is 0 or false
3e755442 (dalf               2016-10-22 19:07:37 +0200 65) (whatever the value in settings.yml)
3e755442 (dalf               2016-10-22 19:07:37 +0200 66) or general.debug=False in settings.yml
3e755442 (dalf               2016-10-22 19:07:37 +0200 67) '''
3e755442 (dalf               2016-10-22 19:07:37 +0200 68) searx_debug_env = environ.get('SEARX_DEBUG', '').lower()
3e755442 (dalf               2016-10-22 19:07:37 +0200 69) if searx_debug_env == 'true' or searx_debug_env == '1':
3e755442 (dalf               2016-10-22 19:07:37 +0200 70)     searx_debug = True
3e755442 (dalf               2016-10-22 19:07:37 +0200 71) elif searx_debug_env == 'false' or searx_debug_env == '0':
3e755442 (dalf               2016-10-22 19:07:37 +0200 72)     searx_debug = False
3e755442 (dalf               2016-10-22 19:07:37 +0200 73) else:
3e755442 (dalf               2016-10-22 19:07:37 +0200 74)     searx_debug = settings.get('general', {}).get('debug')
3e755442 (dalf               2016-10-22 19:07:37 +0200 75) 
3e755442 (dalf               2016-10-22 19:07:37 +0200 76) if searx_debug:
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 77)     logging.basicConfig(level=logging.DEBUG)
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 78) else:
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 79)     logging.basicConfig(level=logging.WARNING)
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 80) 
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 81) logger = logging.getLogger('searx')
9c91ab33 (Alexandre Flament  2017-01-06 13:52:59 +0100 82) logger.debug('read configuration from %s', settings_path)
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 83) # Workaround for openssl versions <1.0.2
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 84) # https://github.com/certifi/python-certifi/issues/26
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 85) if OPENSSL_VERSION_INFO[0:3] < (1, 0, 2):
f86e212d (misnyo             2016-01-06 19:29:51 +0100 86)     if hasattr(certifi, 'old_where'):
f86e212d (misnyo             2016-01-06 19:29:51 +0100 87)         environ['REQUESTS_CA_BUNDLE'] = certifi.old_where()
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 88)     logger.warning('You are using an old openssl version({0}), please upgrade above 1.0.2!'.format(OPENSSL_VERSION))
35a2bc56 (misnyo             2015-12-29 19:16:26 +0100 89) 
6cbd29f6 (Adam Tauber        2015-01-09 04:01:31 +0100 90) logger.info('Initialisation done')
e3033393 (Adam Tauber        2017-12-29 09:13:29 +0100 91) 
e3033393 (Adam Tauber        2017-12-29 09:13:29 +0100 92) if 'SEARX_SECRET' in environ:
e3033393 (Adam Tauber        2017-12-29 09:13:29 +0100 93)     settings['server']['secret_key'] = environ['SEARX_SECRET']
