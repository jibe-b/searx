c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   1) '''
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   2) searx is free software: you can redistribute it and/or modify
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   3) it under the terms of the GNU Affero General Public License as published by
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   4) the Free Software Foundation, either version 3 of the License, or
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   5) (at your option) any later version.
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   6) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   7) searx is distributed in the hope that it will be useful,
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   8) but WITHOUT ANY WARRANTY; without even the implied warranty of
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200   9) MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  10) GNU Affero General Public License for more details.
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  11) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  12) You should have received a copy of the GNU Affero General Public License
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  13) along with searx. If not, see < http://www.gnu.org/licenses/ >.
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  14) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  15) (C) 2013- by Adam Tauber, <asciimoo@gmail.com>
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  16) '''
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200  17) 
ffbee4bb (Adam Tauber       2016-07-31 23:39:58 +0200  18) import gc
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  19) import sys
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100  20) import threading
a5324d9d (Adam Tauber       2014-12-14 01:18:01 +0100  21) from time import time
55abf07a (Adam Tauber       2016-09-06 00:36:33 +0200  22) from uuid import uuid4
243d3e42 (Noémi Ványi       2017-07-09 22:09:46 +0200  23) from flask_babel import gettext
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  24) import requests.exceptions
ffbee4bb (Adam Tauber       2016-07-31 23:39:58 +0200  25) import searx.poolrequests as requests_lib
0540ea9e (asciimoo          2014-02-07 01:19:07 +0100  26) from searx.engines import (
4d177039 (marc              2017-07-20 15:47:20 -0500  27)     categories, engines, settings
0540ea9e (asciimoo          2014-02-07 01:19:07 +0100  28) )
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100  29) from searx.answerers import ask
fe691a09 (Noemi Vanyi       2016-04-08 16:38:05 +0200  30) from searx.utils import gen_useragent
fd65c129 (marc              2017-03-01 17:11:51 -0600  31) from searx.query import RawTextQuery, SearchQuery, VALID_LANGUAGE_CODE
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  32) from searx.results import ResultContainer
299a80a1 (Adam Tauber       2015-01-09 04:13:05 +0100  33) from searx import logger
67e11c42 (dalf              2016-10-22 13:10:31 +0200  34) from searx.plugins import plugins
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100  35) from searx.exceptions import SearxParameterException
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200  36) 
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  37) try:
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  38)     from thread import start_new_thread
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  39) except:
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  40)     from _thread import start_new_thread
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  41) 
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  42) if sys.version_info[0] == 3:
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  43)     unicode = str
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  44) 
299a80a1 (Adam Tauber       2015-01-09 04:13:05 +0100  45) logger = logger.getChild('search')
299a80a1 (Adam Tauber       2015-01-09 04:13:05 +0100  46) 
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200  47) number_of_searches = 0
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200  48) 
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200  49) 
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  50) def send_http_request(engine, request_params):
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  51)     # create dictionary which contain all
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  52)     # informations about the request
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  53)     request_args = dict(
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  54)         headers=request_params['headers'],
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  55)         cookies=request_params['cookies'],
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  56)         verify=request_params['verify']
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  57)     )
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  58) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  59)     # specific type of request (GET or POST)
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  60)     if request_params['method'] == 'GET':
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  61)         req = requests_lib.get
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  62)     else:
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  63)         req = requests_lib.post
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  64)         request_args['data'] = request_params['data']
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  65) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  66)     # send the request
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  67)     return req(request_params['url'], **request_args)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  68) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  69) 
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  70) def search_one_request(engine, query, request_params):
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  71)     # update request parameters dependent on
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  72)     # search-engine (contained in engines folder)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  73)     engine.request(query, request_params)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  74) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  75)     # ignoring empty urls
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  76)     if request_params['url'] is None:
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  77)         return []
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  78) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  79)     if not request_params['url']:
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  80)         return []
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  81) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  82)     # send request
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  83)     response = send_http_request(engine, request_params)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100  84) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  85)     # parse the response
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  86)     response.search_params = request_params
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  87)     return engine.response(response)
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  88) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  89) 
28d51fd0 (Alexandre Flament 2016-12-30 17:37:46 +0100  90) def search_one_request_safe(engine_name, query, request_params, result_container, start_time, timeout_limit):
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  91)     # set timeout for all HTTP requests
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  92)     requests_lib.set_timeout_for_thread(timeout_limit, start_time=start_time)
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  93)     # reset the HTTP total time
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  94)     requests_lib.reset_time_for_thread()
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  95) 
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  96)     #
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  97)     engine = engines[engine_name]
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100  98) 
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200  99)     # suppose everything will be alright
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 100)     requests_exception = False
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 101) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 102)     try:
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 103)         # send requests and parse the results
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 104)         search_results = search_one_request(engine, query, request_params)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 105) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 106)         # add results
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 107)         result_container.extend(engine_name, search_results)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 108) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 109)         # update engine time when there is no exception
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 110)         with threading.RLock():
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 111)             engine.stats['engine_time'] += time() - start_time
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 112)             engine.stats['engine_time_count'] += 1
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 113)             # update stats with the total HTTP time
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 114)             engine.stats['page_load_time'] += requests_lib.get_time_for_thread()
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 115)             engine.stats['page_load_count'] += 1
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 116) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 117)     except Exception as e:
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 118)         search_duration = time() - start_time
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 119) 
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 120)         with threading.RLock():
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 121)             engine.stats['errors'] += 1
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 122) 
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 123)         if (issubclass(e.__class__, requests.exceptions.Timeout)):
243d3e42 (Noémi Ványi       2017-07-09 22:09:46 +0200 124)             result_container.add_unresponsive_engine((engine_name, gettext('timeout')))
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 125)             # requests timeout (connect or read)
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 126)             logger.error("engine {0} : HTTP requests timeout"
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 127)                          "(search duration : {1} s, timeout: {2} s) : {3}"
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 128)                          .format(engine_name, search_duration, timeout_limit, e.__class__.__name__))
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 129)             requests_exception = True
5a955192 (Alexandre Flament 2016-12-30 18:08:48 +0100 130)         elif (issubclass(e.__class__, requests.exceptions.RequestException)):
243d3e42 (Noémi Ványi       2017-07-09 22:09:46 +0200 131)             result_container.add_unresponsive_engine((engine_name, gettext('request exception')))
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 132)             # other requests exception
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 133)             logger.exception("engine {0} : requests exception"
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 134)                              "(search duration : {1} s, timeout: {2} s) : {3}"
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 135)                              .format(engine_name, search_duration, timeout_limit, e))
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 136)             requests_exception = True
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 137)         else:
1435ae7e (Adam Tauber       2017-12-05 20:38:32 +0100 138)             result_container.add_unresponsive_engine((
1435ae7e (Adam Tauber       2017-12-05 20:38:32 +0100 139)                 engine_name,
1435ae7e (Adam Tauber       2017-12-05 20:38:32 +0100 140)                 u'{0}: {1}'.format(gettext('unexpected crash'), e),
1435ae7e (Adam Tauber       2017-12-05 20:38:32 +0100 141)             ))
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 142)             # others errors
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 143)             logger.exception('engine {0} : exception : {1}'.format(engine_name, e))
1c969186 (Adam Tauber       2014-12-19 20:01:01 +0100 144) 
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 145)     # suspend or not the engine if there are HTTP errors
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 146)     with threading.RLock():
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 147)         if requests_exception:
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 148)             # update continuous_errors / suspend_end_time
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 149)             engine.continuous_errors += 1
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 150)             engine.suspend_end_time = time() + min(60, engine.continuous_errors)
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 151)         else:
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 152)             # no HTTP error (perhaps an engine error)
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 153)             # anyway, reset the suspend variables
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 154)             engine.continuous_errors = 0
c1cfe978 (Alexandre Flament 2017-07-23 11:56:57 +0200 155)             engine.suspend_end_time = 0
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 156) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 157) 
28d51fd0 (Alexandre Flament 2016-12-30 17:37:46 +0100 158) def search_multiple_requests(requests, result_container, start_time, timeout_limit):
55abf07a (Adam Tauber       2016-09-06 00:36:33 +0200 159)     search_id = uuid4().__str__()
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 160) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 161)     for engine_name, query, request_params in requests:
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100 162)         th = threading.Thread(
0a2fde19 (Alexandre Flament 2016-12-29 11:08:19 +0100 163)             target=search_one_request_safe,
28d51fd0 (Alexandre Flament 2016-12-30 17:37:46 +0100 164)             args=(engine_name, query, request_params, result_container, start_time, timeout_limit),
55abf07a (Adam Tauber       2016-09-06 00:36:33 +0200 165)             name=search_id,
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100 166)         )
2b7f3e28 (Adam Tauber       2014-12-19 13:59:41 +0100 167)         th._engine_name = engine_name
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100 168)         th.start()
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100 169) 
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100 170)     for th in threading.enumerate():
55abf07a (Adam Tauber       2016-09-06 00:36:33 +0200 171)         if th.name == search_id:
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 172)             remaining_time = max(0.0, timeout_limit - (time() - start_time))
a5324d9d (Adam Tauber       2014-12-14 01:18:01 +0100 173)             th.join(remaining_time)
a5324d9d (Adam Tauber       2014-12-14 01:18:01 +0100 174)             if th.isAlive():
80331cc8 (Noémi Ványi       2017-07-19 17:24:50 +0200 175)                 result_container.add_unresponsive_engine((th._engine_name, gettext('timeout')))
299a80a1 (Adam Tauber       2015-01-09 04:13:05 +0100 176)                 logger.warning('engine timeout: {0}'.format(th._engine_name))
a5324d9d (Adam Tauber       2014-12-14 01:18:01 +0100 177) 
d959cb1c (Adam Tauber       2014-12-05 19:24:11 +0100 178) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 179) # get default reqest parameter
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 180) def default_request_params():
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 181)     return {
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 182)         'method': 'GET',
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 183)         'headers': {},
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 184)         'data': {},
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 185)         'url': '',
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 186)         'cookies': {},
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 187)         'verify': True
5d977056 (Cqoicebordel      2014-12-29 21:31:04 +0100 188)     }
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 189) 
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 190) 
58a6c045 (Alexandre Flament 2016-11-02 14:52:22 +0100 191) def get_search_query_from_webapp(preferences, form):
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 192)     # no text for the query ?
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 193)     if not form.get('q'):
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 194)         raise SearxParameterException('q', '')
67e11c42 (dalf              2016-10-22 13:10:31 +0200 195) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 196)     # set blocked engines
67e11c42 (dalf              2016-10-22 13:10:31 +0200 197)     disabled_engines = preferences.engines.get_disabled()
67e11c42 (dalf              2016-10-22 13:10:31 +0200 198) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 199)     # parse query, if tags are set, which change
67e11c42 (dalf              2016-10-22 13:10:31 +0200 200)     # the serch engine or search-language
58a6c045 (Alexandre Flament 2016-11-02 14:52:22 +0100 201)     raw_text_query = RawTextQuery(form['q'], disabled_engines)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 202)     raw_text_query.parse_query()
67e11c42 (dalf              2016-10-22 13:10:31 +0200 203) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 204)     # set query
67e11c42 (dalf              2016-10-22 13:10:31 +0200 205)     query = raw_text_query.getSearchQuery()
67e11c42 (dalf              2016-10-22 13:10:31 +0200 206) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 207)     # get and check page number
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 208)     pageno_param = form.get('pageno', '1')
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 209)     if not pageno_param.isdigit() or int(pageno_param) < 1:
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 210)         raise SearxParameterException('pageno', pageno_param)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 211)     query_pageno = int(pageno_param)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 212) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 213)     # get language
1b46ecd2 (marc              2016-12-13 21:36:40 -0600 214)     # set specific language if set on request, query or preferences
67e11c42 (dalf              2016-10-22 13:10:31 +0200 215)     # TODO support search with multible languages
67e11c42 (dalf              2016-10-22 13:10:31 +0200 216)     if len(raw_text_query.languages):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 217)         query_lang = raw_text_query.languages[-1]
1b46ecd2 (marc              2016-12-13 21:36:40 -0600 218)     elif 'language' in form:
1b46ecd2 (marc              2016-12-13 21:36:40 -0600 219)         query_lang = form.get('language')
1b46ecd2 (marc              2016-12-13 21:36:40 -0600 220)     else:
1b46ecd2 (marc              2016-12-13 21:36:40 -0600 221)         query_lang = preferences.get_value('language')
67e11c42 (dalf              2016-10-22 13:10:31 +0200 222) 
4d177039 (marc              2017-07-20 15:47:20 -0500 223)     # provides backwards compatibility for requests using old language default
4d177039 (marc              2017-07-20 15:47:20 -0500 224)     if query_lang == 'all':
4d177039 (marc              2017-07-20 15:47:20 -0500 225)         query_lang = settings['search']['language']
4d177039 (marc              2017-07-20 15:47:20 -0500 226) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 227)     # check language
fd65c129 (marc              2017-03-01 17:11:51 -0600 228)     if not VALID_LANGUAGE_CODE.match(query_lang):
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 229)         raise SearxParameterException('language', query_lang)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 230) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 231)     # get safesearch
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 232)     if 'safesearch' in form:
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 233)         query_safesearch = form.get('safesearch')
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 234)         # first check safesearch
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 235)         if not query_safesearch.isdigit():
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 236)             raise SearxParameterException('safesearch', query_safesearch)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 237)         query_safesearch = int(query_safesearch)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 238)     else:
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 239)         query_safesearch = preferences.get_value('safesearch')
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 240) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 241)     # safesearch : second check
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 242)     if query_safesearch < 0 or query_safesearch > 2:
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 243)         raise SearxParameterException('safesearch', query_safesearch)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 244) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 245)     # get time_range
58a6c045 (Alexandre Flament 2016-11-02 14:52:22 +0100 246)     query_time_range = form.get('time_range')
67e11c42 (dalf              2016-10-22 13:10:31 +0200 247) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 248)     # check time_range
e7aa9890 (Adam Tauber       2017-01-21 20:21:32 +0100 249)     if query_time_range not in ('None', None, '', 'day', 'week', 'month', 'year'):
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 250)         raise SearxParameterException('time_range', query_time_range)
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 251) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 252)     # query_engines
67e11c42 (dalf              2016-10-22 13:10:31 +0200 253)     query_engines = raw_text_query.engines
67e11c42 (dalf              2016-10-22 13:10:31 +0200 254) 
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 255)     # query_categories
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 256)     query_categories = []
15eef0eb (Alexandre Flament 2017-01-20 18:52:47 +0100 257) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 258)     # if engines are calculated from query,
67e11c42 (dalf              2016-10-22 13:10:31 +0200 259)     # set categories by using that informations
67e11c42 (dalf              2016-10-22 13:10:31 +0200 260)     if query_engines and raw_text_query.specific:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 261)         query_categories = list(set(engine['category']
67e11c42 (dalf              2016-10-22 13:10:31 +0200 262)                                     for engine in query_engines))
67e11c42 (dalf              2016-10-22 13:10:31 +0200 263) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 264)     # otherwise, using defined categories to
67e11c42 (dalf              2016-10-22 13:10:31 +0200 265)     # calculate which engines should be used
67e11c42 (dalf              2016-10-22 13:10:31 +0200 266)     else:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 267)         # set categories/engines
67e11c42 (dalf              2016-10-22 13:10:31 +0200 268)         load_default_categories = True
58a6c045 (Alexandre Flament 2016-11-02 14:52:22 +0100 269)         for pd_name, pd in form.items():
67e11c42 (dalf              2016-10-22 13:10:31 +0200 270)             if pd_name == 'categories':
67e11c42 (dalf              2016-10-22 13:10:31 +0200 271)                 query_categories.extend(categ for categ in map(unicode.strip, pd.split(',')) if categ in categories)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 272)             elif pd_name == 'engines':
67e11c42 (dalf              2016-10-22 13:10:31 +0200 273)                 pd_engines = [{'category': engines[engine].categories[0],
67e11c42 (dalf              2016-10-22 13:10:31 +0200 274)                                'name': engine}
67e11c42 (dalf              2016-10-22 13:10:31 +0200 275)                               for engine in map(unicode.strip, pd.split(',')) if engine in engines]
67e11c42 (dalf              2016-10-22 13:10:31 +0200 276)                 if pd_engines:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 277)                     query_engines.extend(pd_engines)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 278)                     load_default_categories = False
67e11c42 (dalf              2016-10-22 13:10:31 +0200 279)             elif pd_name.startswith('category_'):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 280)                 category = pd_name[9:]
67e11c42 (dalf              2016-10-22 13:10:31 +0200 281) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 282)                 # if category is not found in list, skip
67e11c42 (dalf              2016-10-22 13:10:31 +0200 283)                 if category not in categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 284)                     continue
67e11c42 (dalf              2016-10-22 13:10:31 +0200 285) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 286)                 if pd != 'off':
67e11c42 (dalf              2016-10-22 13:10:31 +0200 287)                     # add category to list
67e11c42 (dalf              2016-10-22 13:10:31 +0200 288)                     query_categories.append(category)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 289)                 elif category in query_categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 290)                     # remove category from list if property is set to 'off'
67e11c42 (dalf              2016-10-22 13:10:31 +0200 291)                     query_categories.remove(category)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 292) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 293)         if not load_default_categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 294)             if not query_categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 295)                 query_categories = list(set(engine['category']
cf5c7d05 (Adam Tauber       2016-12-15 11:59:21 +0100 296)                                             for engine in query_engines))
0540ea9e (asciimoo          2014-02-07 01:19:07 +0100 297)         else:
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 298)             # if no category is specified for this search,
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 299)             # using user-defined default-configuration which
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 300)             # (is stored in cookie)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 301)             if not query_categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 302)                 cookie_categories = preferences.get_value('categories')
0540ea9e (asciimoo          2014-02-07 01:19:07 +0100 303)                 for ccateg in cookie_categories:
0540ea9e (asciimoo          2014-02-07 01:19:07 +0100 304)                     if ccateg in categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 305)                         query_categories.append(ccateg)
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 306) 
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 307)             # if still no category is specified, using general
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 308)             # as default-category
67e11c42 (dalf              2016-10-22 13:10:31 +0200 309)             if not query_categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 310)                 query_categories = ['general']
0540ea9e (asciimoo          2014-02-07 01:19:07 +0100 311) 
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 312)             # using all engines for that search, which are
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 313)             # declared under the specific categories
67e11c42 (dalf              2016-10-22 13:10:31 +0200 314)             for categ in query_categories:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 315)                 query_engines.extend({'category': categ,
67e11c42 (dalf              2016-10-22 13:10:31 +0200 316)                                       'name': engine.name}
67e11c42 (dalf              2016-10-22 13:10:31 +0200 317)                                      for engine in categories[categ]
67e11c42 (dalf              2016-10-22 13:10:31 +0200 318)                                      if (engine.name, categ) not in disabled_engines)
67e11c42 (dalf              2016-10-22 13:10:31 +0200 319) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 320)     return SearchQuery(query, query_engines, query_categories,
67e11c42 (dalf              2016-10-22 13:10:31 +0200 321)                        query_lang, query_safesearch, query_pageno, query_time_range)
7f45e8a5 (asciimoo          2014-02-09 01:07:18 +0100 322) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 323) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 324) class Search(object):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 325) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 326)     """Search information container"""
67e11c42 (dalf              2016-10-22 13:10:31 +0200 327) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 328)     def __init__(self, search_query):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 329)         # init vars
67e11c42 (dalf              2016-10-22 13:10:31 +0200 330)         super(Search, self).__init__()
67e11c42 (dalf              2016-10-22 13:10:31 +0200 331)         self.search_query = search_query
67e11c42 (dalf              2016-10-22 13:10:31 +0200 332)         self.result_container = ResultContainer()
10947536 (Adam Tauber       2016-02-20 00:21:56 +0100 333) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 334)     # do search-request
67e11c42 (dalf              2016-10-22 13:10:31 +0200 335)     def search(self):
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 336)         global number_of_searches
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 337) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 338)         # start time
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 339)         start_time = time()
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 340) 
e48f07a3 (Alexandre Flament 2016-12-09 23:11:45 +0100 341)         # answeres ?
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 342)         answerers_results = ask(self.search_query)
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 343) 
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 344)         if answerers_results:
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 345)             for results in answerers_results:
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 346)                 self.result_container.extend('answer', results)
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 347)             return self.result_container
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 348) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 349)         # init vars
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 350)         requests = []
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 351) 
22da73b8 (Thomas Pointhuber 2014-09-13 18:44:11 +0200 352)         # increase number of searches
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 353)         number_of_searches += 1
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 354) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 355)         # set default useragent
5740cfbf (Adam Tauber       2014-10-19 12:41:04 +0200 356)         # user_agent = request.headers.get('User-Agent', '')
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 357)         user_agent = gen_useragent()
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 358) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 359)         search_query = self.search_query
67e11c42 (dalf              2016-10-22 13:10:31 +0200 360) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 361)         # max of all selected engine timeout
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 362)         timeout_limit = 0
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 363) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 364)         # start search-reqest for all selected engines
67e11c42 (dalf              2016-10-22 13:10:31 +0200 365)         for selected_engine in search_query.engines:
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 366)             if selected_engine['name'] not in engines:
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 367)                 continue
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 368) 
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 369)             engine = engines[selected_engine['name']]
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 370) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 371)             # skip suspended engines
7d26b3f8 (Adam Tauber       2016-11-06 02:51:14 +0100 372)             if engine.suspend_end_time >= time():
7d26b3f8 (Adam Tauber       2016-11-06 02:51:14 +0100 373)                 logger.debug('Engine currently suspended: %s', selected_engine['name'])
67e11c42 (dalf              2016-10-22 13:10:31 +0200 374)                 continue
67e11c42 (dalf              2016-10-22 13:10:31 +0200 375) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 376)             # if paging is not supported, skip
67e11c42 (dalf              2016-10-22 13:10:31 +0200 377)             if search_query.pageno > 1 and not engine.paging:
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 378)                 continue
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 379) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 380)             # if time_range is not supported, skip
67e11c42 (dalf              2016-10-22 13:10:31 +0200 381)             if search_query.time_range and not engine.time_range_support:
93c0c49e (Noemi Vanyi       2016-07-17 18:42:30 +0200 382)                 continue
93c0c49e (Noemi Vanyi       2016-07-17 18:42:30 +0200 383) 
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 384)             # set default request parameters
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 385)             request_params = default_request_params()
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 386)             request_params['headers']['User-Agent'] = user_agent
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 387)             request_params['category'] = selected_engine['category']
67e11c42 (dalf              2016-10-22 13:10:31 +0200 388)             request_params['pageno'] = search_query.pageno
00668dd0 (Cqoicebordel      2015-06-03 17:16:12 +0200 389) 
42ac2c5b (Adam Tauber       2015-08-25 22:02:18 +0200 390)             if hasattr(engine, 'language') and engine.language:
00668dd0 (Cqoicebordel      2015-06-03 17:16:12 +0200 391)                 request_params['language'] = engine.language
00668dd0 (Cqoicebordel      2015-06-03 17:16:12 +0200 392)             else:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 393)                 request_params['language'] = search_query.lang
00668dd0 (Cqoicebordel      2015-06-03 17:16:12 +0200 394) 
fe691a09 (Noemi Vanyi       2016-04-08 16:38:05 +0200 395)             # 0 = None, 1 = Moderate, 2 = Strict
67e11c42 (dalf              2016-10-22 13:10:31 +0200 396)             request_params['safesearch'] = search_query.safesearch
67e11c42 (dalf              2016-10-22 13:10:31 +0200 397)             request_params['time_range'] = search_query.time_range
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 398) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 399)             # append request to list
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100 400)             requests.append((selected_engine['name'], search_query.query, request_params))
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 401) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 402)             # update timeout_limit
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 403)             timeout_limit = max(timeout_limit, engine.timeout)
b0ba367a (Adam Tauber       2014-07-07 13:59:27 +0200 404) 
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 405)         if requests:
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 406)             # send all search-request
28d51fd0 (Alexandre Flament 2016-12-30 17:37:46 +0100 407)             search_multiple_requests(requests, self.result_container, start_time, timeout_limit)
01e2648e (Alexandre Flament 2016-11-05 13:45:20 +0100 408)             start_new_thread(gc.collect, tuple())
c9bab0e8 (Thomas Pointhuber 2014-09-13 18:25:25 +0200 409) 
6bfd5663 (Dalf              2014-09-28 16:51:41 +0200 410)         # return results, suggestions, answers and infoboxes
67e11c42 (dalf              2016-10-22 13:10:31 +0200 411)         return self.result_container
67e11c42 (dalf              2016-10-22 13:10:31 +0200 412) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 413) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 414) class SearchWithPlugins(Search):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 415) 
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 416)     """Similar to the Search class but call the plugins."""
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 417) 
84a2c97a (Alexandre Flament 2017-01-02 12:06:04 +0100 418)     def __init__(self, search_query, ordered_plugin_list, request):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 419)         super(SearchWithPlugins, self).__init__(search_query)
84a2c97a (Alexandre Flament 2017-01-02 12:06:04 +0100 420)         self.ordered_plugin_list = ordered_plugin_list
67e11c42 (dalf              2016-10-22 13:10:31 +0200 421)         self.request = request
67e11c42 (dalf              2016-10-22 13:10:31 +0200 422) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 423)     def search(self):
84a2c97a (Alexandre Flament 2017-01-02 12:06:04 +0100 424)         if plugins.call(self.ordered_plugin_list, 'pre_search', self.request, self):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 425)             super(SearchWithPlugins, self).search()
67e11c42 (dalf              2016-10-22 13:10:31 +0200 426) 
84a2c97a (Alexandre Flament 2017-01-02 12:06:04 +0100 427)         plugins.call(self.ordered_plugin_list, 'post_search', self.request, self)
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 428) 
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 429)         results = self.result_container.get_ordered_results()
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 430) 
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 431)         for result in results:
84a2c97a (Alexandre Flament 2017-01-02 12:06:04 +0100 432)             plugins.call(self.ordered_plugin_list, 'on_result', self.request, self, result)
fbb080f3 (dalf              2016-10-22 14:01:53 +0200 433) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 434)         return self.result_container
