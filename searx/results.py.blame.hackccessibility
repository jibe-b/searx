b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200   1) import re
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100   2) import sys
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200   3) from collections import defaultdict
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200   4) from operator import itemgetter
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200   5) from threading import RLock
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200   6) from searx.engines import engines
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100   7) from searx.url_utils import urlparse, unquote
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100   8) 
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100   9) if sys.version_info[0] == 3:
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  10)     basestring = str
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  11) 
b3ab221b (stepshal          2016-07-11 20:29:47 +0700  12) CONTENT_LEN_IGNORED_CHARS_REGEX = re.compile(r'[,;:!?\./\\\\ ()-_]', re.M | re.U)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  13) WHITESPACE_REGEX = re.compile('( |\t|\n)+', re.M | re.U)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  14) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  15) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  16) # return the meaningful length of the content for a result
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  17) @little_documented
def result_content_len(content):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  18)     if isinstance(content, basestring):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  19)         return len(CONTENT_LEN_IGNORED_CHARS_REGEX.sub('', content))
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  20)     else:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  21)         return 0
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  22) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  23) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  24) def compare_urls(url_a, url_b):
c2e40142 (marc              2016-06-24 00:38:17 -0500  25)     # ignore www. in comparison
c2e40142 (marc              2016-06-24 00:38:17 -0500  26)     if url_a.netloc.startswith('www.'):
c2e40142 (marc              2016-06-24 00:38:17 -0500  27)         host_a = url_a.netloc.replace('www.', '', 1)
c2e40142 (marc              2016-06-24 00:38:17 -0500  28)     else:
c2e40142 (marc              2016-06-24 00:38:17 -0500  29)         host_a = url_a.netloc
c2e40142 (marc              2016-06-24 00:38:17 -0500  30)     if url_b.netloc.startswith('www.'):
c2e40142 (marc              2016-06-24 00:38:17 -0500  31)         host_b = url_b.netloc.replace('www.', '', 1)
c2e40142 (marc              2016-06-24 00:38:17 -0500  32)     else:
c2e40142 (marc              2016-06-24 00:38:17 -0500  33)         host_b = url_b.netloc
c2e40142 (marc              2016-06-24 00:38:17 -0500  34) 
413e1437 (David A Roberts   2016-08-14 21:40:28 +1000  35)     if host_a != host_b or url_a.query != url_b.query or url_a.fragment != url_b.fragment:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  36)         return False
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  37) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  38)     # remove / from the end of the url if required
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  39)     path_a = url_a.path[:-1]\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  40)         if url_a.path.endswith('/')\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  41)         else url_a.path
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  42)     path_b = url_b.path[:-1]\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  43)         if url_b.path.endswith('/')\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  44)         else url_b.path
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  45) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  46)     return unquote(path_a) == unquote(path_b)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  47) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  48) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  49) def merge_two_infoboxes(infobox1, infobox2):
ad58b14b (marc              2016-06-27 23:35:43 -0500  50)     # get engines weights
ad58b14b (marc              2016-06-27 23:35:43 -0500  51)     if hasattr(engines[infobox1['engine']], 'weight'):
ad58b14b (marc              2016-06-27 23:35:43 -0500  52)         weight1 = engines[infobox1['engine']].weight
ad58b14b (marc              2016-06-27 23:35:43 -0500  53)     else:
ad58b14b (marc              2016-06-27 23:35:43 -0500  54)         weight1 = 1
ad58b14b (marc              2016-06-27 23:35:43 -0500  55)     if hasattr(engines[infobox2['engine']], 'weight'):
ad58b14b (marc              2016-06-27 23:35:43 -0500  56)         weight2 = engines[infobox2['engine']].weight
ad58b14b (marc              2016-06-27 23:35:43 -0500  57)     else:
ad58b14b (marc              2016-06-27 23:35:43 -0500  58)         weight2 = 1
ad58b14b (marc              2016-06-27 23:35:43 -0500  59) 
ad58b14b (marc              2016-06-27 23:35:43 -0500  60)     if weight2 > weight1:
ad58b14b (marc              2016-06-27 23:35:43 -0500  61)         infobox1['engine'] = infobox2['engine']
ad58b14b (marc              2016-06-27 23:35:43 -0500  62) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  63)     if 'urls' in infobox2:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  64)         urls1 = infobox1.get('urls', None)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  65)         if urls1 is None:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  66)             urls1 = []
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  67) 
c2e40142 (marc              2016-06-24 00:38:17 -0500  68)         for url2 in infobox2.get('urls', []):
c2e40142 (marc              2016-06-24 00:38:17 -0500  69)             unique_url = True
c2e40142 (marc              2016-06-24 00:38:17 -0500  70)             for url1 in infobox1.get('urls', []):
c2e40142 (marc              2016-06-24 00:38:17 -0500  71)                 if compare_urls(urlparse(url1.get('url', '')), urlparse(url2.get('url', ''))):
c2e40142 (marc              2016-06-24 00:38:17 -0500  72)                     unique_url = False
c2e40142 (marc              2016-06-24 00:38:17 -0500  73)                     break
c2e40142 (marc              2016-06-24 00:38:17 -0500  74)             if unique_url:
c2e40142 (marc              2016-06-24 00:38:17 -0500  75)                 urls1.append(url2)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  76) 
c2e40142 (marc              2016-06-24 00:38:17 -0500  77)         infobox1['urls'] = urls1
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  78) 
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  79)     if 'img_src' in infobox2:
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  80)         img1 = infobox1.get('img_src', None)
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  81)         img2 = infobox2.get('img_src')
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  82)         if img1 is None:
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  83)             infobox1['img_src'] = img2
ad58b14b (marc              2016-06-27 23:35:43 -0500  84)         elif weight2 > weight1:
ad58b14b (marc              2016-06-27 23:35:43 -0500  85)             infobox1['img_src'] = img2
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  86) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  87)     if 'attributes' in infobox2:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  88)         attributes1 = infobox1.get('attributes', None)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  89)         if attributes1 is None:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  90)             attributes1 = []
8d335dbd (a01200356         2016-03-14 00:32:36 -0600  91)             infobox1['attributes'] = attributes1
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  92) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  93)         attributeSet = set()
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  94)         for attribute in infobox1.get('attributes', []):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  95)             if attribute.get('label', None) not in attributeSet:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  96)                 attributeSet.add(attribute.get('label', None))
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  97) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200  98)         for attribute in infobox2.get('attributes', []):
ad58b14b (marc              2016-06-27 23:35:43 -0500  99)             if attribute.get('label', None) not in attributeSet:
ad58b14b (marc              2016-06-27 23:35:43 -0500 100)                 attributes1.append(attribute)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 101) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 102)     if 'content' in infobox2:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 103)         content1 = infobox1.get('content', None)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 104)         content2 = infobox2.get('content', '')
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 105)         if content1 is not None:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 106)             if result_content_len(content2) > result_content_len(content1):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 107)                 infobox1['content'] = content2
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 108)         else:
8d335dbd (a01200356         2016-03-14 00:32:36 -0600 109)             infobox1['content'] = content2
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 110) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 111) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 112) def result_score(result):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 113)     weight = 1.0
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 114) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 115)     for result_engine in result['engines']:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 116)         if hasattr(engines[result_engine], 'weight'):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 117)             weight *= float(engines[result_engine].weight)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 118) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 119)     occurences = len(result['positions'])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 120) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 121)     return sum((occurences * weight) / position for position in result['positions'])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 122) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 123) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 124) class ResultContainer(object):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 125)     """docstring for ResultContainer"""
cd9b494c (stepshal          2016-07-10 21:44:27 +0700 126) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 127)     @little_documented
def __init__(self):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 128)         super(ResultContainer, self).__init__()
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 129)         self.results = defaultdict(list)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 130)         self._merged_results = []
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 131)         self.infoboxes = []
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 132)         self.suggestions = set()
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 133)         self.answers = set()
1d30141c (David A Roberts   2017-01-14 18:40:37 +1000 134)         self.corrections = set()
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 135)         self._number_of_results = []
67e11c42 (dalf              2016-10-22 13:10:31 +0200 136)         self._ordered = False
67e11c42 (dalf              2016-10-22 13:10:31 +0200 137)         self.paging = False
2242000b (Noémi Ványi       2017-07-19 17:23:54 +0200 138)         self.unresponsive_engines = set()
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 139) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 140)     def extend(self, engine_name, results):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 141)         for result in list(results):
3a8ab588 (Alexandre Flament 2016-12-30 17:16:53 +0100 142)             result['engine'] = engine_name
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 143)             if 'suggestion' in result:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 144)                 self.suggestions.add(result['suggestion'])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 145)                 results.remove(result)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 146)             elif 'answer' in result:
a59d1713 (Adam Tauber       2015-10-26 14:22:27 +0100 147)                 self.answers.add(result['answer'])
66a70c6a (Adam Tauber       2015-10-03 19:16:26 +0200 148)                 results.remove(result)
1d30141c (David A Roberts   2017-01-14 18:40:37 +1000 149)             elif 'correction' in result:
1d30141c (David A Roberts   2017-01-14 18:40:37 +1000 150)                 self.corrections.add(result['correction'])
1d30141c (David A Roberts   2017-01-14 18:40:37 +1000 151)                 results.remove(result)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 152)             elif 'infobox' in result:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 153)                 self._merge_infobox(result)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 154)                 results.remove(result)
2f7752b4 (Adam Tauber       2016-06-28 00:06:50 +0200 155)             elif 'number_of_results' in result:
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 156)                 self._number_of_results.append(result['number_of_results'])
2f7752b4 (Adam Tauber       2016-06-28 00:06:50 +0200 157)                 results.remove(result)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 158) 
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 159)         if engine_name in engines:
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 160)             with RLock():
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 161)                 engines[engine_name].stats['search_count'] += 1
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 162)                 engines[engine_name].stats['result_count'] += len(results)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 163) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 164)         if not results:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 165)             return
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 166) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 167)         self.results[engine_name].extend(results)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 168) 
971ed0ab (Adam Tauber       2016-11-19 20:53:51 +0100 169)         if not self.paging and engine_name in engines and engines[engine_name].paging:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 170)             self.paging = True
67e11c42 (dalf              2016-10-22 13:10:31 +0200 171) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 172)         for i, result in enumerate(results):
a065fcdc (Adam Tauber       2017-12-01 20:44:31 +0100 173)             if 'url' in result and not isinstance(result['url'], basestring):
a065fcdc (Adam Tauber       2017-12-01 20:44:31 +0100 174)                 continue
5cbe4c53 (Adam Tauber       2016-03-30 15:47:15 +0200 175)             try:
5cbe4c53 (Adam Tauber       2016-03-30 15:47:15 +0200 176)                 result['url'] = result['url'].decode('utf-8')
5cbe4c53 (Adam Tauber       2016-03-30 15:47:15 +0200 177)             except:
5cbe4c53 (Adam Tauber       2016-03-30 15:47:15 +0200 178)                 pass
a065fcdc (Adam Tauber       2017-12-01 20:44:31 +0100 179)             if 'title' in result and not isinstance(result['title'], basestring):
a065fcdc (Adam Tauber       2017-12-01 20:44:31 +0100 180)                 continue
a065fcdc (Adam Tauber       2017-12-01 20:44:31 +0100 181)             if 'content' in result and not isinstance(result['content'], basestring):
a065fcdc (Adam Tauber       2017-12-01 20:44:31 +0100 182)                 continue
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 183)             position = i + 1
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 184)             self._merge_result(result, position)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 185) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 186)     def _merge_infobox(self, infobox):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 187)         add_infobox = True
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 188)         infobox_id = infobox.get('id', None)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 189)         if infobox_id is not None:
c2e40142 (marc              2016-06-24 00:38:17 -0500 190)             for existingIndex in self.infoboxes:
c2e40142 (marc              2016-06-24 00:38:17 -0500 191)                 if compare_urls(urlparse(existingIndex.get('id', '')), urlparse(infobox_id)):
c2e40142 (marc              2016-06-24 00:38:17 -0500 192)                     merge_two_infoboxes(existingIndex, infobox)
c2e40142 (marc              2016-06-24 00:38:17 -0500 193)                     add_infobox = False
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 194) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 195)         if add_infobox:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 196)             self.infoboxes.append(infobox)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 197) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 198)     def _merge_result(self, result, position):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 199)         result['parsed_url'] = urlparse(result['url'])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 200) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 201)         # if the result has no scheme, use http as default
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 202)         if not result['parsed_url'].scheme:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 203)             result['parsed_url'] = result['parsed_url']._replace(scheme="http")
fea2c5a7 (Luc Didry         2016-02-26 12:05:11 +0100 204)             result['url'] = result['parsed_url'].geturl()
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 205) 
59c02e8e (Noémi Ványi       2017-11-03 19:52:47 +0100 206)         result['engines'] = set([result['engine']])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 207) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 208)         # strip multiple spaces and cariage returns from content
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 209)         if result.get('content'):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 210)             result['content'] = WHITESPACE_REGEX.sub(' ', result['content'])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 211) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 212)         # check for duplicates
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 213)         duplicated = False
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 214)         for merged_result in self._merged_results:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 215)             if compare_urls(result['parsed_url'], merged_result['parsed_url'])\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 216)                and result.get('template') == merged_result.get('template'):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 217)                 duplicated = merged_result
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 218)                 break
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 219) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 220)         # merge duplicates together
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 221)         if duplicated:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 222)             # using content with more text
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 223)             if result_content_len(result.get('content', '')) >\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 224)                     result_content_len(duplicated.get('content', '')):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 225)                 duplicated['content'] = result['content']
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 226) 
5f36e85b (marc              2017-07-21 22:32:18 -0500 227)             # merge all result's parameters not found in duplicate
5f36e85b (marc              2017-07-21 22:32:18 -0500 228)             for key in result.keys():
5f36e85b (marc              2017-07-21 22:32:18 -0500 229)                 if not duplicated.get(key):
5f36e85b (marc              2017-07-21 22:32:18 -0500 230)                     duplicated[key] = result.get(key)
5f36e85b (marc              2017-07-21 22:32:18 -0500 231) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 232)             # add the new position
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 233)             duplicated['positions'].append(position)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 234) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 235)             # add engine to list of result-engines
59c02e8e (Noémi Ványi       2017-11-03 19:52:47 +0100 236)             duplicated['engines'].add(result['engine'])
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 237) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 238)             # using https if possible
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 239)             if duplicated['parsed_url'].scheme != 'https' and result['parsed_url'].scheme == 'https':
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 240)                 duplicated['url'] = result['parsed_url'].geturl()
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 241)                 duplicated['parsed_url'] = result['parsed_url']
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 242) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 243)         # if there is no duplicate found, append result
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 244)         else:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 245)             result['positions'] = [position]
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 246)             with RLock():
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 247)                 self._merged_results.append(result)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 248) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 249)     @little_documented
def order_results(self):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 250)         for result in self._merged_results:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 251)             score = result_score(result)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 252)             result['score'] = score
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 253)             with RLock():
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 254)                 for result_engine in result['engines']:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 255)                     engines[result_engine].stats['score_count'] += score
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 256) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 257)         results = sorted(self._merged_results, key=itemgetter('score'), reverse=True)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 258) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 259)         # pass 2 : group results by category and template
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 260)         gresults = []
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 261)         categoryPositions = {}
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 262) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 263)         for i, res in enumerate(results):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 264)             # FIXME : handle more than one category per engine
7ebe3a6f (Alexandre Flament 2017-03-14 12:35:40 +0100 265)             res['category'] = engines[res['engine']].categories[0]
7ebe3a6f (Alexandre Flament 2017-03-14 12:35:40 +0100 266) 
7ebe3a6f (Alexandre Flament 2017-03-14 12:35:40 +0100 267)             # FIXME : handle more than one category per engine
7ebe3a6f (Alexandre Flament 2017-03-14 12:35:40 +0100 268)             category = engines[res['engine']].categories[0]\
7ebe3a6f (Alexandre Flament 2017-03-14 12:35:40 +0100 269)                 + ':' + res.get('template', '')\
7ebe3a6f (Alexandre Flament 2017-03-14 12:35:40 +0100 270)                 + ':' + ('img_src' if 'img_src' in res or 'thumbnail' in res else '')
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 271) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 272)             current = None if category not in categoryPositions\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 273)                 else categoryPositions[category]
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 274) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 275)             # group with previous results using the same category
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 276)             # if the group can accept more result and is not too far
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 277)             # from the current position
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 278)             if current is not None and (current['count'] > 0)\
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 279)                     and (len(gresults) - current['index'] < 20):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 280)                 # group with the previous results using
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 281)                 # the same category with this one
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 282)                 index = current['index']
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 283)                 gresults.insert(index, res)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 284) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 285)                 # update every index after the current one
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 286)                 # (including the current one)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 287)                 for k in categoryPositions:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 288)                     v = categoryPositions[k]['index']
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 289)                     if v >= index:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 290)                         categoryPositions[k]['index'] = v + 1
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 291) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 292)                 # update this category
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 293)                 current['count'] -= 1
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 294) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 295)             else:
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 296)                 # same category
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 297)                 gresults.append(res)
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 298) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 299)                 # update categoryIndex
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 300)                 categoryPositions[category] = {'index': len(gresults), 'count': 8}
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 301) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 302)         # update _merged_results
67e11c42 (dalf              2016-10-22 13:10:31 +0200 303)         self._ordered = True
67e11c42 (dalf              2016-10-22 13:10:31 +0200 304)         self._merged_results = gresults
67e11c42 (dalf              2016-10-22 13:10:31 +0200 305) 
67e11c42 (dalf              2016-10-22 13:10:31 +0200 306)     def get_ordered_results(self):
67e11c42 (dalf              2016-10-22 13:10:31 +0200 307)         if not self._ordered:
67e11c42 (dalf              2016-10-22 13:10:31 +0200 308)             self.order_results()
67e11c42 (dalf              2016-10-22 13:10:31 +0200 309)         return self._merged_results
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 310) 
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 311)     def results_length(self):
b6c3cb0b (Adam Tauber       2015-10-03 17:26:07 +0200 312)         return len(self._merged_results)
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 313) 
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 314)     def results_number(self):
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 315)         resultnum_sum = sum(self._number_of_results)
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 316)         if not resultnum_sum or not self._number_of_results:
485da549 (Adam Tauber       2016-07-16 21:37:40 +0200 317)             return 0
21c5fb1c (Adam Tauber       2016-07-17 00:03:22 +0200 318)         return resultnum_sum / len(self._number_of_results)
243d3e42 (Noémi Ványi       2017-07-09 22:09:46 +0200 319) 
2242000b (Noémi Ványi       2017-07-19 17:23:54 +0200 320)     def add_unresponsive_engine(self, engine_error):
2242000b (Noémi Ványi       2017-07-19 17:23:54 +0200 321)         self.unresponsive_engines.add(engine_error)
