d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   1) """
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200   2)  Swisscows (Web, Images)
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   3) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   4)  @website     https://swisscows.ch
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   5)  @provide-api no
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   6) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   7)  @using-api   no
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   8)  @results     HTML (using search portal)
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200   9)  @stable      no (HTML can change)
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  10)  @parse       url, title, content
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  11) """
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  12) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  13) from json import loads
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  14) import re
f62ce21f (marc              2016-11-05 20:51:38 -0600  15) from lxml.html import fromstring
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  16) from searx.url_utils import unquote, urlencode
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  17) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  18) # engine dependent config
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  19) categories = ['general', 'images']
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  20) paging = True
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  21) language_support = True
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  22) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  23) # search-url
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  24) base_url = 'https://swisscows.ch/'
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  25) search_string = '?{query}&page={page}'
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  26) 
af35eee1 (marc              2016-12-15 00:34:43 -0600  27) supported_languages_url = base_url
af35eee1 (marc              2016-12-15 00:34:43 -0600  28) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  29) # regex
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  30) regex_json = re.compile(b'initialData: {"Request":(.|\n)*},\s*environment')
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  31) regex_json_remove_start = re.compile(b'^initialData:\s*')
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  32) regex_json_remove_end = re.compile(b',\s*environment$')
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  33) regex_img_url_remove_start = re.compile(b'^https?://i\.swisscows\.ch/\?link=')
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  34) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  35) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  36) # do search-request
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  37) @little_documented
def request(query, params):
4d177039 (marc              2017-07-20 15:47:20 -0500  38)     if params['language'].split('-')[0] == 'no':
a11948c7 (marc              2016-10-29 21:04:01 -0500  39)         region = 'nb-NO'
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  40)     else:
149802c5 (marc              2016-08-05 23:34:56 -0500  41)         region = params['language']
149802c5 (marc              2016-08-05 23:34:56 -0500  42)         ui_language = params['language'].split('-')[0]
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  43) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  44)     search_path = search_string.format(
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  45)         query=urlencode({'query': query, 'uiLanguage': ui_language, 'region': region}),
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  46)         page=params['pageno']
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  47)     )
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  48) 
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  49)     # image search query is something like 'image?{query}&page={page}'
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  50)     if params['category'] == 'images':
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  51)         search_path = 'image' + search_path
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  52) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  53)     params['url'] = base_url + search_path
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  54) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  55)     return params
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  56) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  57) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  58) # get response from search-request
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  59) def response(resp):
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  60)     results = []
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  61) 
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  62)     json_regex = regex_json.search(resp.text)
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  63) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  64)     # check if results are returned
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  65)     if not json_regex:
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  66)         return []
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  67) 
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  68)     json_raw = regex_json_remove_end.sub(b'', regex_json_remove_start.sub(b'', json_regex.group()))
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  69)     json = loads(json_raw.decode('utf-8'))
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  70) 
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  71)     # parse results
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  72)     for result in json['Results'].get('items', []):
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  73)         result_title = result['Title'].replace(u'\uE000', '').replace(u'\uE001', '')
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  74) 
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  75)         # parse image results
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  76)         if result.get('ContentType', '').startswith('image'):
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  77)             img_url = unquote(regex_img_url_remove_start.sub(b'', result['Url'].encode('utf-8')).decode('utf-8'))
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  78) 
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  79)             # append result
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  80)             results.append({'url': result['SourceUrl'],
16bdc0ba (Adam Tauber       2016-12-09 11:44:24 +0100  81)                             'title': result['Title'],
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  82)                             'content': '',
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  83)                             'img_src': img_url,
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  84)                             'template': 'images.html'})
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  85) 
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  86)         # parse general results
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  87)         else:
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  88)             result_url = result['Url'].replace(u'\uE000', '').replace(u'\uE001', '')
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  89)             result_content = result['Description'].replace(u'\uE000', '').replace(u'\uE001', '')
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  90) 
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  91)             # append result
2d810793 (Thomas Pointhuber 2015-06-01 12:30:07 +0200  92)             results.append({'url': result_url,
16bdc0ba (Adam Tauber       2016-12-09 11:44:24 +0100  93)                             'title': result_title,
16bdc0ba (Adam Tauber       2016-12-09 11:44:24 +0100  94)                             'content': result_content})
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  95) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  96)     # parse images
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  97)     for result in json.get('Images', []):
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200  98)         # decode image url
52e615de (Adam Tauber       2016-11-30 18:43:03 +0100  99)         img_url = unquote(regex_img_url_remove_start.sub(b'', result['Url'].encode('utf-8')).decode('utf-8'))
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 100) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 101)         # append result
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 102)         results.append({'url': result['SourceUrl'],
16bdc0ba (Adam Tauber       2016-12-09 11:44:24 +0100 103)                         'title': result['Title'],
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 104)                         'content': '',
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 105)                         'img_src': img_url,
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 106)                         'template': 'images.html'})
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 107) 
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 108)     # return results
d923b2a4 (Thomas Pointhuber 2015-06-01 09:15:50 +0200 109)     return results
f62ce21f (marc              2016-11-05 20:51:38 -0600 110) 
f62ce21f (marc              2016-11-05 20:51:38 -0600 111) 
f62ce21f (marc              2016-11-05 20:51:38 -0600 112) # get supported languages from their site
af35eee1 (marc              2016-12-15 00:34:43 -0600 113) def _fetch_supported_languages(resp):
f62ce21f (marc              2016-11-05 20:51:38 -0600 114)     supported_languages = []
af35eee1 (marc              2016-12-15 00:34:43 -0600 115)     dom = fromstring(resp.text)
f62ce21f (marc              2016-11-05 20:51:38 -0600 116)     options = dom.xpath('//div[@id="regions-popup"]//ul/li/a')
f62ce21f (marc              2016-11-05 20:51:38 -0600 117)     for option in options:
44085e31 (marc              2017-10-10 16:52:41 -0500 118)         code = option.xpath('./@data-search-language')[0]
fd65c129 (marc              2017-03-01 17:11:51 -0600 119)         if code.startswith('nb-'):
fd65c129 (marc              2017-03-01 17:11:51 -0600 120)             code = code.replace('nb', 'no', 1)
f62ce21f (marc              2016-11-05 20:51:38 -0600 121)         supported_languages.append(code)
f62ce21f (marc              2016-11-05 20:51:38 -0600 122) 
f62ce21f (marc              2016-11-05 20:51:38 -0600 123)     return supported_languages
