988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  1) """
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  2) Microsoft Academic (Science)
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  3) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  4) @website     https://academic.microsoft.com
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  5) @provide-api yes
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  6) @using-api   no
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  7) @results     JSON
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  8) @stable      no
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100  9) @parse       url, title, content
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 10) """
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 11) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 12) from datetime import datetime
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 13) from json import loads
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 14) from uuid import uuid4
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 15) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 16) from searx.url_utils import urlencode
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 17) from searx.utils import html_to_text
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 18) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 19) categories = ['images']
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 20) paging = True
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 21) result_url = 'https://academic.microsoft.com/api/search/GetEntityResults?{query}'
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 22) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 23) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 24) def request(query, params):
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 25)     correlation_id = uuid4()
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 26)     msacademic = uuid4()
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 27)     time_now = datetime.now()
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 28) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 29)     params['url'] = result_url.format(query=urlencode({'correlationId': correlation_id}))
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 30)     params['cookies']['msacademic'] = str(msacademic)
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 31)     params['cookies']['ai_user'] = 'vhd0H|{now}'.format(now=str(time_now))
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 32)     params['method'] = 'POST'
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 33)     params['data'] = {
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 34)         'Query': '@{query}@'.format(query=query),
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 35)         'Limit': 10,
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 36)         'Offset': params['pageno'] - 1,
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 37)         'Filters': '',
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 38)         'OrderBy': '',
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 39)         'SortAscending': False,
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 40)     }
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 41) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 42)     return params
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 43) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 44) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 45) def response(resp):
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 46)     results = []
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 47)     response_data = loads(resp.text)
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 48) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 49)     for result in response_data['results']:
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 50)         url = _get_url(result)
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 51)         title = result['e']['dn']
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 52)         content = _get_content(result)
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 53)         results.append({
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 54)             'url': url,
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 55)             'title': html_to_text(title),
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 56)             'content': html_to_text(content),
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 57)         })
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 58) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 59)     return results
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 60) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 61) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 62) def _get_url(result):
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 63)     if 's' in result['e']:
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 64)         return result['e']['s'][0]['u']
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 65)     return 'https://academic.microsoft.com/#/detail/{pid}'.format(pid=result['id'])
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 66) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 67) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 68) def _get_content(result):
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 69)     if 'd' in result['e']:
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 70)         content = result['e']['d']
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 71)         if len(content) > 300:
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 72)             return content[:300] + '...'
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 73)         return content
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 74) 
988cf381 (Noémi Ványi 2018-02-17 21:36:34 +0100 75)     return ''
